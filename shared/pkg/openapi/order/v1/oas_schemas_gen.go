// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *GenericErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// APIV1OrdersOrderUUIDCancelPostNoContent is response for APIV1OrdersOrderUUIDCancelPost operation.
type APIV1OrdersOrderUUIDCancelPostNoContent struct{}

func (*APIV1OrdersOrderUUIDCancelPostNoContent) aPIV1OrdersOrderUUIDCancelPostRes() {}

// Ref: #/components/schemas/bad_gateway_error
type BadGatewayError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadGatewayError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadGatewayError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadGatewayError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadGatewayError) SetMessage(val string) {
	s.Message = val
}

func (*BadGatewayError) createOrderRes() {}
func (*BadGatewayError) payOrderRes()    {}

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) createOrderRes() {}
func (*BadRequestError) payOrderRes()    {}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) aPIV1OrdersOrderUUIDCancelPostRes() {}

// Ref: #/components/schemas/create_order_request_dto
type CreateOrderRequestDto struct {
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список UUID деталей.
	PartUuids []string `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequestDto) GetUserUUID() string {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderRequestDto) GetPartUuids() []string {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequestDto) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderRequestDto) SetPartUuids(val []string) {
	s.PartUuids = val
}

// Ref: #/components/schemas/create_order_response_dto
type CreateOrderResponseDto struct {
	// UUID созданного заказа.
	OrderUUID string `json:"order_uuid"`
	// Общая стоимость заказа.
	TotalPrice float32 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponseDto) GetOrderUUID() string {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponseDto) GetTotalPrice() float32 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponseDto) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponseDto) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

func (*CreateOrderResponseDto) createOrderRes() {}

// Ref: #/components/schemas/generic_error
type GenericError struct {
	// HTTP-код ошибки.
	Code OptInt `json:"code"`
	// Описание ошибки.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val OptString) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

// Ref: #/components/schemas/get_order_response_dto
type GetOrderResponseDto struct {
	// UUID заказа.
	OrderUUID string `json:"order_uuid"`
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список UUID деталей.
	PartUuids []string `json:"part_uuids"`
	// Общая стоимость заказа.
	TotalPrice float32 `json:"total_price"`
	// UUID транзакции платежа.
	TransactionUUID OptString        `json:"transaction_uuid"`
	PaymentMethod   OptPaymentMethod `json:"payment_method"`
	Status          OrderStatus      `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *GetOrderResponseDto) GetOrderUUID() string {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *GetOrderResponseDto) GetUserUUID() string {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *GetOrderResponseDto) GetPartUuids() []string {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GetOrderResponseDto) GetTotalPrice() float32 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *GetOrderResponseDto) GetTransactionUUID() OptString {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *GetOrderResponseDto) GetPaymentMethod() OptPaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *GetOrderResponseDto) GetStatus() OrderStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *GetOrderResponseDto) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *GetOrderResponseDto) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *GetOrderResponseDto) SetPartUuids(val []string) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GetOrderResponseDto) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *GetOrderResponseDto) SetTransactionUUID(val OptString) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *GetOrderResponseDto) SetPaymentMethod(val OptPaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *GetOrderResponseDto) SetStatus(val OrderStatus) {
	s.Status = val
}

func (*GetOrderResponseDto) aPIV1OrdersOrderUUIDGetRes() {}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) aPIV1OrdersOrderUUIDCancelPostRes() {}
func (*InternalServerError) aPIV1OrdersOrderUUIDGetRes()        {}
func (*InternalServerError) createOrderRes()                    {}
func (*InternalServerError) payOrderRes()                       {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) aPIV1OrdersOrderUUIDCancelPostRes() {}
func (*NotFoundError) aPIV1OrdersOrderUUIDGetRes()        {}
func (*NotFoundError) payOrderRes()                       {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethod returns new OptPaymentMethod with value set to v.
func NewOptPaymentMethod(v PaymentMethod) OptPaymentMethod {
	return OptPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethod is optional PaymentMethod.
type OptPaymentMethod struct {
	Value PaymentMethod
	Set   bool
}

// IsSet returns true if OptPaymentMethod was set.
func (o OptPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethod) Reset() {
	var v PaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethod) SetTo(v PaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethod) Get() (v PaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethod) Or(d PaymentMethod) PaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Статус заказа.
// Ref: #/components/schemas/order_status
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pay_order_request_dto
type PayOrderRequestDto struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequestDto) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequestDto) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/pay_order_response_dto
type PayOrderResponseDto struct {
	// UUID транзакции платежа.
	TransactionUUID string `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponseDto) GetTransactionUUID() string {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponseDto) SetTransactionUUID(val string) {
	s.TransactionUUID = val
}

func (*PayOrderResponseDto) payOrderRes() {}

// Способы оплаты.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodUNKNOWN       PaymentMethod = "UNKNOWN"
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNKNOWN,
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNKNOWN:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNKNOWN:
		*s = PaymentMethodUNKNOWN
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
