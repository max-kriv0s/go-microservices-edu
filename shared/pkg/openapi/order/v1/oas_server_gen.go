// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIV1OrdersOrderUUIDCancelPost implements POST /api/v1/orders/{order_uuid}/cancel operation.
	//
	// CancelOrder.
	//
	// POST /api/v1/orders/{order_uuid}/cancel
	APIV1OrdersOrderUUIDCancelPost(ctx context.Context, params APIV1OrdersOrderUUIDCancelPostParams) (APIV1OrdersOrderUUIDCancelPostRes, error)
	// APIV1OrdersOrderUUIDGet implements GET /api/v1/orders/{order_uuid} operation.
	//
	// GetOrderById.
	//
	// GET /api/v1/orders/{order_uuid}
	APIV1OrdersOrderUUIDGet(ctx context.Context, params APIV1OrdersOrderUUIDGetParams) (APIV1OrdersOrderUUIDGetRes, error)
	// CreateOrder implements CreateOrder operation.
	//
	// Создаёт новый заказ на основе выбранных
	// пользователем деталей.
	//
	// POST /api/v1/orders
	CreateOrder(ctx context.Context, req *CreateOrderRequestDto) (CreateOrderRes, error)
	// PayOrder implements PayOrder operation.
	//
	// Оплата заказа.
	//
	// POST /api/v1/orders/{order_uuid}/pay
	PayOrder(ctx context.Context, req *PayOrderRequestDto, params PayOrderParams) (PayOrderRes, error)
	// NewError creates *GenericErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *GenericErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
