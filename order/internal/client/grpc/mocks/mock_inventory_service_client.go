// Code generated for service

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/max-kriv0s/go-microservices-edu/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// InventoryServiceClient is an autogenerated mock type for the InventoryServiceClient type
type InventoryServiceClient struct {
	mock.Mock
}

type InventoryServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *InventoryServiceClient) EXPECT() *InventoryServiceClient_Expecter {
	return &InventoryServiceClient_Expecter{mock: &_m.Mock}
}

// ListParts provides a mock function with given fields: ctx, partsUUIDs
func (_m *InventoryServiceClient) ListParts(ctx context.Context, partsUUIDs []string) ([]model.Part, error) {
	ret := _m.Called(ctx, partsUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 []model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]model.Part, error)); ok {
		return rf(ctx, partsUUIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Part); ok {
		r0 = rf(ctx, partsUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, partsUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InventoryServiceClient_ListParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParts'
type InventoryServiceClient_ListParts_Call struct {
	*mock.Call
}

// ListParts is a helper method to define mock.On call
//   - ctx context.Context
//   - partsUUIDs []string
func (_e *InventoryServiceClient_Expecter) ListParts(ctx interface{}, partsUUIDs interface{}) *InventoryServiceClient_ListParts_Call {
	return &InventoryServiceClient_ListParts_Call{Call: _e.mock.On("ListParts", ctx, partsUUIDs)}
}

func (_c *InventoryServiceClient_ListParts_Call) Run(run func(ctx context.Context, partsUUIDs []string)) *InventoryServiceClient_ListParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *InventoryServiceClient_ListParts_Call) Return(_a0 []model.Part, _a1 error) *InventoryServiceClient_ListParts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InventoryServiceClient_ListParts_Call) RunAndReturn(run func(context.Context, []string) ([]model.Part, error)) *InventoryServiceClient_ListParts_Call {
	_c.Call.Return(run)
	return _c
}

// NewInventoryServiceClient creates a new instance of InventoryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryServiceClient {
	mock := &InventoryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
